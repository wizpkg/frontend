/*
 * Wiz Processor API
 * This is the HTTP + JSON + REST version of the Wiz Processor API.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WizProcessorApi);
  }
}(this, function(expect, WizProcessorApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WizProcessorApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('addData', function() {
        it('should call addData successfully', function(done) {
          // TODO: uncomment, update parameter values for addData call and complete the assertions
          /*
          var procID = "procID_example";
          var runID = "runID_example";
          var data = new WizProcessorApi.ProcessorsData();
          data.associatedChunkID = "";
          data.chunkID = "";
          data.filesystemReference = new WizProcessorApi.ProcessorsFilesystemReference();
          data.filesystemReference.driver = "";
          data.filesystemReference.location = "";
          data.format = 0;
          data.rawData = ;
          data.state = 0;
          data.type = 0;

          instance.addData(procID, runID, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('configure', function() {
        it('should call configure successfully', function(done) {
          // TODO: uncomment, update parameter values for configure call and complete the assertions
          /*
          var procID = "procID_example";
          var runID = "runID_example";
          var configuration = new WizProcessorApi.ProcessorsConfiguration();
          configuration.executorConfig = new WizProcessorApi.ProcessorsExecutorConfig();
          configuration.executorConfig.downstreamLocations = [new WizProcessorApi.ProcessorsDownstreamDataLocation()];
          configuration.executorConfig.downstreamLocations[0].hostname = "";
          configuration.executorConfig.downstreamLocations[0].procID = "";
          configuration.executorConfig.downstreamLocations[0].runID = "";
          configuration.executorConfig.maxWorkers = 0;
          configuration.executorConfig.sendDownstream = false;
          configuration.expectedData = new WizProcessorApi.ProcessorsExpectedData();
          configuration.expectedData.numChunks = 0;
          configuration.processor = ;

          instance.configure(procID, runID, configuration, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllProcessors', function() {
        it('should call getAllProcessors successfully', function(done) {
          // TODO: uncomment getAllProcessors call and complete the assertions
          /*

          instance.getAllProcessors(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsProcessors);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllRuns', function() {
        it('should call getAllRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllRuns call and complete the assertions
          /*
          var procID = "procID_example";

          instance.getAllRuns(procID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsRuns);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getConfig', function() {
        it('should call getConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for getConfig call and complete the assertions
          /*
          var procID = "procID_example";
          var runID = "runID_example";

          instance.getConfig(procID, runID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsConfiguration);
            expect(data.executorConfig).to.be.a(WizProcessorApi.ProcessorsExecutorConfig);
                  {
                let dataCtr = data.executorConfig.downstreamLocations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(WizProcessorApi.ProcessorsDownstreamDataLocation);
                  expect(data.hostname).to.be.a('string');
                  expect(data.hostname).to.be("");
                  expect(data.procID).to.be.a('string');
                  expect(data.procID).to.be("");
                  expect(data.runID).to.be.a('string');
                  expect(data.runID).to.be("");
                }
              }
              expect(data.executorConfig.maxWorkers).to.be.a('number');
              expect(data.executorConfig.maxWorkers).to.be(0);
              expect(data.executorConfig.sendDownstream).to.be.a('boolean');
              expect(data.executorConfig.sendDownstream).to.be(false);
            expect(data.expectedData).to.be.a(WizProcessorApi.ProcessorsExpectedData);
                  expect(data.expectedData.numChunks).to.be.a('number');
              expect(data.expectedData.numChunks).to.be(0);
            expect(data.processor).to.be.a(Object);
            expect(data.processor).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getData', function() {
        it('should call getData successfully', function(done) {
          // TODO: uncomment, update parameter values for getData call and complete the assertions
          /*
          var procID = "procID_example";
          var runID = "runID_example";

          instance.getData(procID, runID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsDataSpec);
            {
              let dataCtr = data._in;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(WizProcessorApi.ProcessorsData);
                expect(data.associatedChunkID).to.be.a('string');
                expect(data.associatedChunkID).to.be("");
                expect(data.chunkID).to.be.a('string');
                expect(data.chunkID).to.be("");
                expect(data.filesystemReference).to.be.a(WizProcessorApi.ProcessorsFilesystemReference);
                      expect(data.filesystemReference.driver).to.be.a('string');
                  expect(data.filesystemReference.driver).to.be("");
                  expect(data.filesystemReference.location).to.be.a('string');
                  expect(data.filesystemReference.location).to.be("");
                expect(data.format).to.be.a('number');
                expect(data.format).to.be(0);
                expect(data.rawData).to.be.a(Object);
                expect(data.rawData).to.be();
                expect(data.state).to.be.a('number');
                expect(data.state).to.be(0);
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
              }
            }
            {
              let dataCtr = data.out;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(WizProcessorApi.ProcessorsData);
                expect(data.associatedChunkID).to.be.a('string');
                expect(data.associatedChunkID).to.be("");
                expect(data.chunkID).to.be.a('string');
                expect(data.chunkID).to.be("");
                expect(data.filesystemReference).to.be.a(WizProcessorApi.ProcessorsFilesystemReference);
                      expect(data.filesystemReference.driver).to.be.a('string');
                  expect(data.filesystemReference.driver).to.be("");
                  expect(data.filesystemReference.location).to.be.a('string');
                  expect(data.filesystemReference.location).to.be("");
                expect(data.format).to.be.a('number');
                expect(data.format).to.be(0);
                expect(data.rawData).to.be.a(Object);
                expect(data.rawData).to.be();
                expect(data.state).to.be.a('number');
                expect(data.state).to.be(0);
                expect(data.type).to.be.a('number');
                expect(data.type).to.be(0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessor', function() {
        it('should call getProcessor successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessor call and complete the assertions
          /*
          var id = "id_example";

          instance.getProcessor(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsProcessor);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.procID).to.be.a('string');
            expect(data.procID).to.be("");
            expect(data.version).to.be.a('string');
            expect(data.version).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRun', function() {
        it('should call getRun successfully', function(done) {
          // TODO: uncomment, update parameter values for getRun call and complete the assertions
          /*
          var procID = "procID_example";
          var runID = "runID_example";

          instance.getRun(procID, runID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(WizProcessorApi.ProcessorsRun);
            expect(data.configuration).to.be.a(WizProcessorApi.ProcessorsConfiguration);
                  expect(data.configuration.executorConfig).to.be.a(WizProcessorApi.ProcessorsExecutorConfig);
                    {
                  let dataCtr = data.configuration.executorConfig.downstreamLocations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(WizProcessorApi.ProcessorsDownstreamDataLocation);
                    expect(data.hostname).to.be.a('string');
                    expect(data.hostname).to.be("");
                    expect(data.procID).to.be.a('string');
                    expect(data.procID).to.be("");
                    expect(data.runID).to.be.a('string');
                    expect(data.runID).to.be("");
                  }
                }
                expect(data.configuration.executorConfig.maxWorkers).to.be.a('number');
                expect(data.configuration.executorConfig.maxWorkers).to.be(0);
                expect(data.configuration.executorConfig.sendDownstream).to.be.a('boolean');
                expect(data.configuration.executorConfig.sendDownstream).to.be(false);
              expect(data.configuration.expectedData).to.be.a(WizProcessorApi.ProcessorsExpectedData);
                    expect(data.configuration.expectedData.numChunks).to.be.a('number');
                expect(data.configuration.expectedData.numChunks).to.be(0);
              expect(data.configuration.processor).to.be.a(Object);
              expect(data.configuration.processor).to.be();
            expect(data.currentState).to.be.a('number');
            expect(data.currentState).to.be(0);
            expect(data.runID).to.be.a('string');
            expect(data.runID).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
