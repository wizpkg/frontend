/*
 * Wiz Processor API
 * This is the HTTP + JSON + REST version of the Wiz Processor API.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProcessorsConfiguration', 'model/ProcessorsData', 'model/ProcessorsDataSpec', 'model/ProcessorsProcessor', 'model/ProcessorsProcessors', 'model/ProcessorsRun', 'model/ProcessorsRuns'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProcessorsConfiguration'), require('../model/ProcessorsData'), require('../model/ProcessorsDataSpec'), require('../model/ProcessorsProcessor'), require('../model/ProcessorsProcessors'), require('../model/ProcessorsRun'), require('../model/ProcessorsRuns'));
  } else {
    // Browser globals (root is window)
    if (!root.WizProcessorApi) {
      root.WizProcessorApi = {};
    }
    root.WizProcessorApi.DefaultApi = factory(root.WizProcessorApi.ApiClient, root.WizProcessorApi.ProcessorsConfiguration, root.WizProcessorApi.ProcessorsData, root.WizProcessorApi.ProcessorsDataSpec, root.WizProcessorApi.ProcessorsProcessor, root.WizProcessorApi.ProcessorsProcessors, root.WizProcessorApi.ProcessorsRun, root.WizProcessorApi.ProcessorsRuns);
  }
}(this, function(ApiClient, ProcessorsConfiguration, ProcessorsData, ProcessorsDataSpec, ProcessorsProcessor, ProcessorsProcessors, ProcessorsRun, ProcessorsRuns) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addData operation.
     * @callback module:api/DefaultApi~addDataCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds data from the run
     * @param {String} procID Processor ID
     * @param {String} runID Run ID
     * @param {module:model/ProcessorsData} data Data to add
     * @param {module:api/DefaultApi~addDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.addData = function(procID, runID, data, callback) {
      var postBody = data;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling addData");
      }

      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling addData");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling addData");
      }


      var pathParams = {
        'procID': procID,
        'runID': runID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/processors/{procID}/runs/{runID}/data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configure operation.
     * @callback module:api/DefaultApi~configureCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a single run's configuration
     * @param {String} procID Processor ID
     * @param {String} runID Run ID
     * @param {module:model/ProcessorsConfiguration} configuration Configuration to set
     * @param {module:api/DefaultApi~configureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.configure = function(procID, runID, configuration, callback) {
      var postBody = configuration;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling configure");
      }

      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling configure");
      }

      // verify the required parameter 'configuration' is set
      if (configuration === undefined || configuration === null) {
        throw new Error("Missing the required parameter 'configuration' when calling configure");
      }


      var pathParams = {
        'procID': procID,
        'runID': runID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/processors/{procID}/runs/{runID}/config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProcessors operation.
     * @callback module:api/DefaultApi~getAllProcessorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsProcessors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all processors
     * @param {module:api/DefaultApi~getAllProcessorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsProcessors}
     */
    this.getAllProcessors = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsProcessors;

      return this.apiClient.callApi(
        '/processors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRuns operation.
     * @callback module:api/DefaultApi~getAllRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all runs
     * @param {String} procID Processor ID
     * @param {module:api/DefaultApi~getAllRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsRuns}
     */
    this.getAllRuns = function(procID, callback) {
      var postBody = null;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling getAllRuns");
      }


      var pathParams = {
        'procID': procID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsRuns;

      return this.apiClient.callApi(
        '/processors/{procID}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfig operation.
     * @callback module:api/DefaultApi~getConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single run's configuration
     * @param {String} procID Processor ID
     * @param {String} runID Run ID
     * @param {module:api/DefaultApi~getConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsConfiguration}
     */
    this.getConfig = function(procID, runID, callback) {
      var postBody = null;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling getConfig");
      }

      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling getConfig");
      }


      var pathParams = {
        'procID': procID,
        'runID': runID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsConfiguration;

      return this.apiClient.callApi(
        '/processors/{procID}/runs/{runID}/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getData operation.
     * @callback module:api/DefaultApi~getDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsDataSpec} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets data to the run
     * @param {String} procID Processor ID
     * @param {String} runID Run ID
     * @param {module:api/DefaultApi~getDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsDataSpec}
     */
    this.getData = function(procID, runID, callback) {
      var postBody = null;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling getData");
      }

      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling getData");
      }


      var pathParams = {
        'procID': procID,
        'runID': runID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsDataSpec;

      return this.apiClient.callApi(
        '/processors/{procID}/runs/{runID}/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessor operation.
     * @callback module:api/DefaultApi~getProcessorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsProcessor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single processor
     * @param {String} id Processor ID
     * @param {module:api/DefaultApi~getProcessorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsProcessor}
     */
    this.getProcessor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProcessor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsProcessor;

      return this.apiClient.callApi(
        '/processors/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/DefaultApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorsRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single run
     * @param {String} procID Processor ID
     * @param {String} runID Run ID
     * @param {module:api/DefaultApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorsRun}
     */
    this.getRun = function(procID, runID, callback) {
      var postBody = null;

      // verify the required parameter 'procID' is set
      if (procID === undefined || procID === null) {
        throw new Error("Missing the required parameter 'procID' when calling getRun");
      }

      // verify the required parameter 'runID' is set
      if (runID === undefined || runID === null) {
        throw new Error("Missing the required parameter 'runID' when calling getRun");
      }


      var pathParams = {
        'procID': procID,
        'runID': runID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessorsRun;

      return this.apiClient.callApi(
        '/processors/{procID}/runs/{runID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
