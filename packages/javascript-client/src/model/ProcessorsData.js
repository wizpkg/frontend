/*
 * Wiz Processor API
 * This is the HTTP + JSON + REST version of the Wiz Processor API.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProcessorsFilesystemReference'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ProcessorsFilesystemReference'));
  } else {
    // Browser globals (root is window)
    if (!root.WizProcessorApi) {
      root.WizProcessorApi = {};
    }
    root.WizProcessorApi.ProcessorsData = factory(root.WizProcessorApi.ApiClient, root.WizProcessorApi.ProcessorsFilesystemReference);
  }
}(this, function(ApiClient, ProcessorsFilesystemReference) {
  'use strict';

  /**
   * The ProcessorsData model module.
   * @module model/ProcessorsData
   * @version 1.0
   */

  /**
   * Constructs a new <code>ProcessorsData</code>.
   * @alias module:model/ProcessorsData
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ProcessorsData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ProcessorsData} obj Optional instance to populate.
   * @return {module:model/ProcessorsData} The populated <code>ProcessorsData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('AssociatedChunkID'))
        obj.associatedChunkID = ApiClient.convertToType(data['AssociatedChunkID'], 'String');
      if (data.hasOwnProperty('ChunkID'))
        obj.chunkID = ApiClient.convertToType(data['ChunkID'], 'String');
      if (data.hasOwnProperty('FilesystemReference'))
        obj.filesystemReference = ProcessorsFilesystemReference.constructFromObject(data['FilesystemReference']);
      if (data.hasOwnProperty('Format'))
        obj.format = ApiClient.convertToType(data['Format'], 'Number');
      if (data.hasOwnProperty('RawData'))
        obj.rawData = ApiClient.convertToType(data['RawData'], Object);
      if (data.hasOwnProperty('State'))
        obj.state = ApiClient.convertToType(data['State'], 'Number');
      if (data.hasOwnProperty('Type'))
        obj.type = ApiClient.convertToType(data['Type'], 'Number');
    }
    return obj;
  }

  /**
   * this is a reference to the opposing data chunk. If it is an input chunk this references the output. If it is an output chunk it references the input chunk
   * @member {String} associatedChunkID
   */
  exports.prototype.associatedChunkID = undefined;

  /**
   * @member {String} chunkID
   */
  exports.prototype.chunkID = undefined;

  /**
   * @member {module:model/ProcessorsFilesystemReference} filesystemReference
   */
  exports.prototype.filesystemReference = undefined;

  /**
   * @member {Number} format
   */
  exports.prototype.format = undefined;

  /**
   * @member {Object} rawData
   */
  exports.prototype.rawData = undefined;

  /**
   * @member {Number} state
   */
  exports.prototype.state = undefined;

  /**
   * @member {Number} type
   */
  exports.prototype.type = undefined;

  return exports;

}));
